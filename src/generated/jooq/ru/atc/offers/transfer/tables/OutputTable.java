/*
 * This file is generated by jOOQ.
 */
package example.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import example.Keys;
import example.Offer;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OutputTable extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>offer.output_table</code>
     */
    public static final OutputTable OUTPUT_TABLE = new OutputTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>offer.output_table.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>offer.output_table.data_text</code>.
     */
    public final TableField<Record, String> DATA_TEXT = createField(DSL.name("data_text"), SQLDataType.VARCHAR, this, "");

    private OutputTable(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private OutputTable(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>offer.output_table</code> table reference
     */
    public OutputTable(String alias) {
        this(DSL.name(alias), OUTPUT_TABLE);
    }

    /**
     * Create an aliased <code>offer.output_table</code> table reference
     */
    public OutputTable(Name alias) {
        this(alias, OUTPUT_TABLE);
    }

    /**
     * Create a <code>offer.output_table</code> table reference
     */
    public OutputTable() {
        this(DSL.name("output_table"), null);
    }

    public <O extends Record> OutputTable(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, OUTPUT_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Offer.OFFER;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.OUTPUT_TABLE_PK;
    }

    @Override
    public OutputTable as(String alias) {
        return new OutputTable(DSL.name(alias), this);
    }

    @Override
    public OutputTable as(Name alias) {
        return new OutputTable(alias, this);
    }

    @Override
    public OutputTable as(Table<?> alias) {
        return new OutputTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OutputTable rename(String name) {
        return new OutputTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OutputTable rename(Name name) {
        return new OutputTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OutputTable rename(Table<?> name) {
        return new OutputTable(name.getQualifiedName(), null);
    }
}
